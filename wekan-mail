#!/usr/bin/node 

// either install in /usr/local/wekan/bin/wekan-mail
// or fix the exim4 transport config to point to this script


const fs = require('fs');
const util = require('util');

var uid = Math.random().toString(36).replace(/[^a-z]+/g, '');
//process.stdout.pipe(access);
//process.stderr.pipe(access);
//process.stdout.write = process.stderr.write = access.write.bind(access);

const fetch = require('node-fetch');
const simpleParser = require('mailparser').simpleParser;


// use globals because it doesn't matter
var inbound_message;
var url;
var messagesender;
var messagerecip;
var messagesubject;
var messagetext;

var headers = {
    "Content-Type": "application/json",
};

// stash for the results of API calls
var boards = [];
var boardCache = {};
var boardId;
var swimlaneId;
var userid;

// var debug = console.log
var access;
access = fs.createWriteStream('/tmp/wekan-email-log-'+uid+'.txt');
var debug = function () { access.write(util.format.apply(null, arguments) + '\n'); }
//var debug = (e) => {};

var content = '';
process.stdin.resume();
process.stdin.on('data', function(buf) { content += buf.toString(); });
process.stdin.on('end', function() {

  //  fs.writeFileSync('/tmp/'+uid+'-raw.mail', content);

simpleParser(content, {}, (err, parsed) => {
  if (err) {
     // if a exim4 pipe transport outputs something, where does it go?
    fs.writeFileSync('/tmp/'+uid+'.err', JSON.stringify({argv: process.argv,
                                                          env: process.env,
                                                          err: err}));
    debug('wekan-email error', err);
  } else {
    inbound_message = parsed;
    fs.writeFileSync('/tmp/'+uid+'.mail', JSON.stringify({argv: process.argv,
                                                          env: process.env,
                                                          cwd: process.cwd(),
                                                          message: parsed}));
    debug(inbound_message);
    messagesender = inbound_message.from.value[0].address;
    messagerecip = inbound_message.to.value[0].address;
    messagesubject = inbound_message.subject;
    messagetext = inbound_message.text;
    debug([messagesender, messagerecip, messagesubject, messagetext]);
    post_to_wekan();
  }
});
})



//  begin the logic of interacting with Wekan
function post_to_wekan() {
  creds = JSON.parse(fs.readFileSync('creds.json'));  // cwd is set in exim4 transport config
  url = creds.url;
  login().then((rLogin) => {
    return Promise.all([fetchUsers()
                        .then((rUsers)=>{ return findUserByEmail(rUsers, messagesender) })
                        //                      .then(JSON.stringify)
                        .then(debug),
                        fetchBoards(rLogin.id)])
  }).then(results => {
    return fetchBoard(results[1] /*rBoards*/, creds.board);
  }).then(rBoard => {
    //debug(rBoard);
    boardId = rBoard._id;
    let defaultswimlane = rBoard.swimlanes.find(e=> { return e.title == 'Default' })
    if (defaultswimlane.length) { swimlaneId = defaultswimlane[0]._id } 
    else { swimlaneId = rBoard.swimlanes[0]._id; }
    return rBoard.lists
      .find(e => { return e.title == creds.list;  })._id;
  })
    .then(lId => { return postCard(lId); })
    .then(debug)
    .then(()=>{
      if (access) { access.end(); }
      process.exit(0)})
}

function login() {
  delete headers.Authorization;
  debug('attempting login with username/password');
  return fetch(url + "users/login", {
    method: 'POST',
    headers: headers, 
    body: JSON.stringify({username: creds.username, password: creds.password })
  }).then((response) => { return response.json(); })
    .then((rLogin) => {
      debug(rLogin);
      let token=rLogin.token;
      if (token) { debug('logged in with username/password', token); }
      else { debug('username/password login failed'); }
      headers.Authorization = "bearer "+rLogin.token;
      userid=rLogin.id;
      debug(JSON.stringify(rLogin));
      return rLogin;
    })
};


function fetchBoards(id) {
  debug ('fetching list of boards');
  return fetch(url+"api/users/"+id+"/boards", {
    method: 'GET',
    headers: headers
  })
    .then((response) => {
      return response.json(); })
    .then((rBoards) => {
      debug(rBoards);
      // document.rBoards = rBoards;
      if (rBoards.length) {
        debug("found list of "+rBoards.length+" boards available");
        boards = rBoards;
        return rBoards;
      } else {
        debug("board list not loaded.  Login?");
        return false;
      }
    })
}

function fetchBoard(rBoards, board) {
  var bId = rBoards.find((e) => { return e.title == board; })._id; 
  debug (`fetching lists for board ${board} with id ${bId}`);
  
  return fetch(url+"api/boards/"+bId+"/export", {
    method: 'GET',
    headers: headers
  }).then(response => {
    return response.json();
  })
    .then(rBoard => {
      //debug(rBoard.length);
      boardCache[bId] = rBoard;
      debug(Object.keys(boardCache[bId]));
      debug(boardCache[bId].users);
      return rBoard;
    });
}

function fetchUsers() {
  return fetch(url+"api/users", {
    method: 'GET',
    headers: headers
  }).then(response => {
    return response.json();
  }).then(rUsers => {
    debug('USERS: ', rUsers);
    return Promise.all(
      rUsers.map((e,i,a) => {
        return fetch(url+"api/users/"+e._id, {
          method: 'GET',
          headers: headers
        }).then(resp => { return resp.json(); })
          .then(rUser => {
            return rUser;
          })
      }))
  })
};
   
function findUserByEmail(rUsers, addr) {
  let user = rUsers.find((e1,i,a)=>{
    return e1.emails.find(e2=>{
      // FIXME: consider optional test for verified flag
      return e2.address.toLowerCase() == addr.toLowerCase()
    })
  });
  if (user) { userid = user._id; }
  return user;
}

function postCard(lId) {
  return fetch(url+"api/boards/"+boardId+'/lists/'+lId+'/cards', {
    method: 'POST',
    headers: headers,
    body: JSON.stringify({ "title": messagesubject,
                           "description": messagetext,
                           "authorId": userid,
                           "swimlaneId": swimlaneId
                         })
  }).then(response => {
    return response.json();
  })
}




/* Local Variables:  */
/* mode: javascript  */
/* End:              */
